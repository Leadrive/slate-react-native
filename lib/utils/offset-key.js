'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==='function'?Symbol.iterator:'@@iterator'](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==='function'?Symbol.iterator:'@@iterator')in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _normalizeNodeAndOffset=require('./normalize-node-and-offset');var _normalizeNodeAndOffset2=_interopRequireDefault(_normalizeNodeAndOffset);var _findClosestNode=require('./find-closest-node');var _findClosestNode2=_interopRequireDefault(_findClosestNode);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var PARSER=/^(\w+)(?:-(\d+))?$/;var ATTRIBUTE='data-offset-key';var SELECTOR='['+ATTRIBUTE+']';var VOID_SELECTOR='[data-slate-void]';function findBounds(index,ranges){var range=ranges.get(index);var start=ranges.slice(0,index).reduce(function(memo,r){return memo+=r.text.length;},0);return{start:start,end:start+range.text.length};}function findKey(rawNode,rawOffset){var _normalizeNodeAndOffs=(0,_normalizeNodeAndOffset2.default)(rawNode,rawOffset),node=_normalizeNodeAndOffs.node,offset=_normalizeNodeAndOffs.offset;var parentNode=node.parentNode;var closest=(0,_findClosestNode2.default)(parentNode,SELECTOR);if(!closest){var closestVoid=(0,_findClosestNode2.default)(parentNode,VOID_SELECTOR);if(!closestVoid)return null;closest=closestVoid.querySelector(SELECTOR);offset=closest.textContent.length;}var offsetKey=closest.getAttribute(ATTRIBUTE);if(!offsetKey)return null;var parsed=parse(offsetKey);return{key:parsed.key,index:parsed.index,offset:offset};}function findPoint(offsetKey,ranges){var key=offsetKey.key,index=offsetKey.index,offset=offsetKey.offset;var _findBounds=findBounds(index,ranges),start=_findBounds.start,end=_findBounds.end;offset=start+offset;offset=Math.max(offset,start);offset=Math.min(offset,end);return{key:key,index:index,start:start,end:end,offset:offset};}function parse(string){var matches=PARSER.exec(string);if(!matches)throw new Error('Invalid offset key string "'+string+'".');var _matches=_slicedToArray(matches,3),original=_matches[0],key=_matches[1],index=_matches[2];return{key:key,index:parseInt(index,10)};}function stringify(object){return object.key+'-'+object.index;}exports.default={findBounds:findBounds,findKey:findKey,findPoint:findPoint,parse:parse,stringify:stringify};